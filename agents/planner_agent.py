import os
import openai
from dotenv import load_dotenv


base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
load_dotenv(dotenv_path=os.path.join(base_dir, ".env"))

OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")
if not OPENROUTER_KEY:
    raise ValueError("OPENROUTER_API_KEY not found in environment.")

openai.api_key = OPENROUTER_KEY
openai.api_base = "https://openrouter.ai/api/v1"  


class PlannerAgent:
    def __init__(self, llm_model="mistralai/mistral-7b-instruct"):
        self.llm_model = llm_model

    def plan_tasks(self, user_goal: str) -> list[str]:
        prompt = [
            {
                "role": "system",
                "content": "You are a travel planning expert agent.",
            },
            {
                "role": "user",
                "content": f"""Given the user request: "{user_goal}"

Break it down into atomic subtasks that can be executed by individual tools.
Keep them short, clear, and unambiguous.

Return only a numbered list of subtasks.
""",
            },
        ]

        try:
            response = openai.ChatCompletion.create(
                model=self.llm_model,
                messages=prompt,
                temperature=0.2,
                max_tokens=500
            )
            output = response["choices"][0]["message"]["content"]
            lines = output.strip().splitlines()

            
            tasks = [
                line.split(".", 1)[1].strip()
                for line in lines
                if "." in line and line.split(".", 1)[1].strip()
            ]
            return tasks if tasks else ["No tasks parsed from response."]
        except Exception as e:
            return [f"Error during planning: {str(e)}"]


def planner_node(state: dict) -> dict:
    planner = PlannerAgent()
    user_goal = state.get("user_goal", "")
    task_queue = planner.plan_tasks(user_goal)
    
    
    if task_queue and not task_queue[0].startswith("Error"):
        state["task_queue"] = task_queue
    else:
        state["task_queue"] = []
        state["last_error"] = task_queue[0]

    
    state.setdefault("history", [])
    state.setdefault("refined", False)

    return state

if __name__ == "__main__":
    test_goal = "Plan a trip to Manali under â‚¹10,000"
    test_state = {
        "user_goal": test_goal
    }

    result = planner_node(test_state)

    if "last_error" in result:
        print("\n Planner encountered an error:")
        print(result["last_error"])
    else:
        print("\n Task Queue generated by PlannerAgent:")
        for i, task in enumerate(result["task_queue"], 1):
            print(f"{i}. {task}")
